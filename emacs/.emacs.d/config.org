# -*- mode: org -*-
#+STARTUP: indent
* Package Management
** Versions
 Emacs and org mode versions

 #+BEGIN_SRC emacs-lisp
 emacs-version
 #+END_SRC

 #+RESULTS:
 : 26.3

 #+BEGIN_SRC emacs-lisp
 (org-version)
 #+END_SRC

 #+RESULTS:
 : 9.1.9

** =package=

 package.el is a package manager for emacs modes

 #+BEGIN_SRC emacs-lisp
      (require 'package)

      (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                          (not (gnutls-available-p))))
             (proto (if no-ssl "http" "https")))
        (when no-ssl
          (warn "\
           Your version of Emacs does not support SSL connections,
           which is unsafe because it allows man-in-the-middle attacks.
           There are two things you can do about this warning:
           1. Install an Emacs version that does support SSL and be safe.
           2. Remove this warning from your init file so you won't see it again."))
        ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
        (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
        ;;(add-to-list 'package-archives (cons "org" (concat proto "://orgmode.org/elpa")) t)
        (when (< emacs-major-version 24)
          ;; For important compatibility libraries like cl-lib
          (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))

   (package-initialize)
 #+END_SRC

** =use-package=

I'm switching [[https://stackoverflow.com/questions/21064916/auto-install-emacs-packages-with-melpa][too]]. Unless it's already installed, update the packages
archives, then install the most recent version of "use-package".

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(setq use-package-always-ensure t)
#+end_src

** =straight=

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

* Detect

Different setup sometimes required for different operating system

#+BEGIN_SRC emacs-lisp
(defun is-mac-p
    ()
  (eq system-type 'darwin))

(defun is-linux-p
    ()
  (eq system-type 'gnu/linux))

(defun is-windows-p
    ()
  (or
   (eq system-type 'ms-dos)
   (eq system-type 'windows-nt)
   (eq system-type 'cygwin)))

(defun is-bsd-p
    ()
  (eq system-type 'gnu/kfreebsd))

(defun is-yizhx
    ()
  (string-equal user-login-name "yizhx"))

(defun internet-up-p (&optional host)
  (= 0 (call-process "ping" nil nil nil "-c" "1" "-W" "1"
                     (if host host "www.google.com"))))

(defun append-to-path (path)
  "Add a path both to the $PATH variable and Emacs's path"
  (setenv "PATH" (concat (getenv "PATH") ":" path))
  (add-to-list 'exec-path path))
 #+END_SRC

* Navigation
** Zooming
*** Hydra

#+BEGIN_SRC emacs-lisp
(use-package hydra
   :config
   (setq hydra-lv nil))
#+END_SRC

*** Key Binding

#+BEGIN_SRC emacs-lisp
 (defhydra hydra-zoom ()
   "zoom"
   ("+" text-scale-increase "in")
   ("=" text-scale-increase "in")
   ("-" text-scale-decrease "out")
   ("_" text-scale-decrease "out")
   ("0" (text-scale-adjust 0) "reset")
   ("q" nil "quit" :color blue))

 (bind-keys ("C-x C-0" . hydra-zoom/body)
            ("C-x C-=" . hydra-zoom/body)
            ("C-x C--" . hydra-zoom/body)
            ("C-x C-+" . hydra-zoom/body))
#+END_SRC

Temporary work around when hydra zoom doesn't work

#+BEGIN_SRC emacs-lisp
;; (global-set-key (kbd "C-x C-=") 'text-scale-increase)
;; (global-set-key (kbd "C-x C--") 'text-scale-decrease)
#+END_SRC
** Lines

Enable line indenting automatically. If needed, you can disable on a mode-by-mode basis.

#+BEGIN_SRC emacs-lisp
(bind-keys ("RET" . newline-and-indent)
           ("C-j" . newline-and-indent))
#+END_SRC

Make =C-n= insert new lines if the point is at the end of the buffer.

#+BEGIN_SRC emacs-lisp
(setq next-line-add-newlines t)
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
;; better scrolling experience
(setq scroll-margin 0
      scroll-conservatively 10000
      scroll-preserve-screen-position t
      auto-window-vscroll nil)
#+END_SRC

There are lots of neat ways of moving around quickly in a
buffer. (Source: [[http://whattheemacsd.com/key-bindings.el-02.html][What the .emacs.d?]])

#+BEGIN_SRC emacs-lisp
(defun super-next-line ()
  (interactive)
  (ignore-errors (next-line 5)))

(defun super-previous-line ()
  (interactive)
  (ignore-errors (previous-line 5)))

(defun super-backward-char ()
  (interactive)
  (ignore-errors (backward-char 5)))

(defun super-forward-char ()
  (interactive)
  (ignore-errors (forward-char 5)))

(bind-keys ("C-S-n" . super-next-line)
           ("C-S-p" . super-previous-line)
           ("C-S-b" . super-backward-char)
           ("C-S-f" . super-forward-char))
#+END_SRC

** macOS

Keymods, so it feels more like linux

 #+BEGIN_SRC emacs-lisp
 (when (is-mac-p)
   (setq mac-command-modifier 'super
         mac-option-modifier 'meta
         mac-control-modifier 'control
         ns-function-modifier 'hyper))
 #+END_SRC

emacs anywhere!

#+BEGIN_SRC shell
(shell-command "curl -fsSL https://raw.github.com/zachcurry/emacs-anywhere/master/install | bash")
(server-start)
#+END_SRC

Need to provide permissions on mac: System Preferences → Security &
Privacy → Accessibility; System Preferences → Keyboard → Shortcuts →
Services

#+BEGIN_SRC emacs-lisp
(add-hook 'ea-popup-hook
  (lambda (app-name window-title x y w h)
   (org-mode)
   ;(set-input-method "Agda")
  )
)
#+END_SRC

** =which-key=

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :defer 1
  :config
  (which-key-mode +1)
  (setq which-key-idle-delay 0.4
        which-key-idle-secondary-delay 0.4))
#+END_SRC

** Parentheses

#+BEGIN_SRC emacs-lisp
(use-package smartparens)
#+END_SRC

** Open Config

#+BEGIN_SRC emacs-lisp
(defun find-config-file ()
  "Edit my emacs config file"
  (interactive)
  (let ((config-file "~/.emacs.d/config.org"))
    (find-file config-file)))

(bind-key "C-c e" 'find-config-file)
#+END_SRC

This will actually use the system-wide user-init-file variable.

#+BEGIN_SRC emacs-lisp
(defun reload-init-file ()
  "Reload my init file."
  (interactive)
  (load-file user-init-file))

(bind-key "C-c M-i" 'reload-init-file)
#+END_SRC

** Open Todos

#+begin_src emacs-lisp
(defun open-todo-file ()
  (interactive)
  (find-file "~/Documents/org/todo.org"))

(bind-key "C-c t" 'open-todo-file)
#+end_src

** =neotree=

#+BEGIN_SRC emacs-lisp
(use-package neotree)
#+END_SRC

** COMMENT =deft=

#+BEGIN_SRC emacs-lisp
(use-package deft
  :after org
  :bind
  ("<f7>" . deft)
  :init
  (setq
   deft-use-filter-string-for-filename t
   deft-extensions '("org" "md")
   deft-text-mode 'org-mode
   deft-recursive t
   deft-file-naming-rules '((noslash . "-") (nospace . "-") (case-fn . downcase))
   deft-org-mode-title-prefix t
   deft-directory org-directory))
#+END_SRC

* Security
** TLS

#+BEGIN_SRC emacs-lisp
(setq tls-checktrust t
      gnutls-verify-error t)
;; FIXME:  workaround to fix https not working well with elpa
;; https://www.reddit.com/r/orgmode/comments/cvmjjr/workaround_for_tlsrelated_bad_request_and_package/
(when
  (and
    (>= libgnutls-version 30603)
    (version<= emacs-version "26.2")
  )
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
#+END_SRC

** Encryption

Force emacs to use its own password prompt ([[https://github.com/mwfogleman/.emacs.d/blob/master/michael.org#encryption][Source]])

#+BEGIN_SRC emacs-lisp
  (setenv "GPG_AGENT_INFO" nil)
#+END_SRC

** Pass

#+BEGIN_SRC emacs-lisp
(use-package pass)
#+END_SRC

Instruction on how to set this up ([[https://gitlab.com/tom.expd/dotfiles/blob/master/password-store/pass-notes.org][link]])

* Saving
** Backups
 Store backups and auto-saved files in a fixed location rather in the same directory as the file.

 #+BEGIN_SRC emacs-lisp
 (let ((backup-dir "~/Documents/backups")
       (auto-saves-dir "~/Documents/auto-saves/"))
   (dolist (dir (list backup-dir auto-saves-dir))
     (when (not (file-directory-p dir))
       (make-directory dir t)))
   (setq backup-directory-alist `(("." . ,backup-dir))
         auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
         auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
         tramp-backup-directory-alist `((".*" . ,backup-dir))
         tramp-auto-save-directory auto-saves-dir))

 (setq backup-by-copying t    ; Don't delink hardlinks
       delete-old-versions t  ; Clean up the backups
       version-control t      ; Use version numbers on backups,
       kept-new-versions 5    ; keep some new versions
       kept-old-versions 2)   ; and some old ones, too
 #+END_SRC

** COMMENT Auto Revert

FIXME: Need to disable this when using tramp

Revert buffers automatically when underlying files are changed
externally. Auto refreshes every 2 seconds. Don't forget to refresh
the version control status as well.

#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :hook (after-init . global-auto-revert-mode)
    :config
    (setq
      auto-revert-interval 2
      auto-revert-check-vc-info t
      auto-revert-verbose nil))
#+END_SRC

** Save Place

If you close a buffer, it remembers where you were in the file, so
that when you re-open that file the buffer goes straight to that
place. The configuration of this mode is very simple as of Emacs 25.1.

#+BEGIN_SRC emacs-lisp

(setq-default save-place t)
(setq save-place-file (expand-file-name ".places" user-emacs-directory))

(save-place-mode 1)
#+END_SRC

* Aesthetics
** Startup Message

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
      initial-scratch-message ""
      inhibit-startup-echo-area-message t)
#+END_SRC

** Maximize screen

Always full screen

#+BEGIN_SRC emacs-lisp
;; (set-frame-parameter nil 'fullscreen 'fullboth)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
 (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
 (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

** Splits

#+BEGIN_SRC emacs-lisp
(defun vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun hsplit-last-buffer ()
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))

(bind-key "C-x 2" 'vsplit-last-buffer)
(bind-key "C-x 3" 'hsplit-last-buffer)
#+END_SRC

** Title of Frame

#+BEGIN_SRC emacs-lisp
(setq frame-title-format '("Orca"))
#+END_SRC

** Line Spacing

#+BEGIN_SRC emacs-lisp
;; increase line space for better readability
(setq-default line-spacing 0.2)
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
;;(set-default-font "Hack 11")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(font-family-list)
#+END_SRC

** Unicode

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
#+END_SRC

** Pretty Symbols

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode 1)

(setq prettify-symbols-alist
      '(
        ("lambda" . 955) ; λ
        ("->" . 8594)    ; →
        ("=>" . 8658)    ; ⇒
        ("map" . 8614)    ; ↦
        ))
#+END_SRC

** Date
#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t
      display-time-24hr-format t
      display-time-format "%a, %b %e %R")

(display-time-mode 1)
(display-time-update)
#+END_SRC

** Yes or No

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Tabs

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

** Fill Width

#+BEGIN_SRC emacs-lisp
(setq fill-column 80)
#+END_SRC

** File Warnings

checks whether the parent directories exist for a given file and
offers to create them if they do not exist ([[http://iqbalansari.me/blog/2014/12/07/automatically-create-parent-directories-on-visiting-a-new-file-in-emacs/][Source]])

#+BEGIN_SRC emacs-lisp
(setq confirm-nonexistent-file-or-buffer nil)

(defun create-non-existent-directory ()
  "Check whether a given file's parent directories exist; if they do not, offer to create them."
  (let ((parent-directory (file-name-directory buffer-file-name)))
    (when (and (not (file-exists-p parent-directory))
               (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
      (make-directory parent-directory t))))

(add-to-list 'find-file-not-found-functions #'create-non-existent-directory)
#+END_SRC

** Transparency

Transparency looks nice

#+begin_src emacs-lisp
(defun transparency (value)
        "set transparency of the frame window. 0=transparent/ 100=opaque"
        (interactive "nTransparency Value 0-100 opaque:")
        (set-frame-parameter (selected-frame) 'alpha value))
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package afternoon-theme
  :config
  (load-theme 'afternoon t)
  (transparency 93)
  (let ((line (face-attribute 'mode-line :underline)))
    (set-face-attribute 'mode-line          nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :overline   line)
    (set-face-attribute 'mode-line-inactive nil :underline  line)
    (set-face-attribute 'mode-line          nil :box        nil)
    (set-face-attribute 'mode-line-inactive nil :box        nil)))
#+end_src

** Parentheses

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    (org-mode . rainbow-delimiters-mode))

#+END_SRC

* Writing
** Delete Selection

- State "DONE"       from              [2020-03-07 Sat 16:56]
replace the active region just by typing text, just like modern editors

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

** Unfill Paragraph

#+BEGIN_SRC emacs-lisp
;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))

;; Handy key definition
(define-key global-map "\M-Q" 'unfill-paragraph)
#+END_SRC

** Whitespace

- State "DONE"       from              [2020-03-07 Sat 16:56]
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

** =org=

#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind (("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c b" . org-iswitchb)
           ("C-c M-k" . org-cut-subtree))
    :custom-face
    (variable-pitch ((t (:family "ETBembo"))))
    (org-done ((t (:strike-through t ))))
    (org-headline-done ((t ( :strike-through t))))
    (org-image-actual-width '(800))
    :init
    (setq default-major-mode 'org-mode

          ;; startup behavior
          org-startup-folded t
          org-startup-indented t
          org-startup-truncated nil
          org-startup-with-inline-images t

          ;; Avoid accidentally editing folded regions, say by adding text after an Org “⋯”.
          org-catch-invisible-edits 'show

          ;; files
          org-directory "~/Documents/org/"
          org-default-notes-file (concat org-directory "index.org")

          ;; the look
          org-blank-before-new-entry '((heading . always) (plain-list-item . auto))
          org-src-fontify-natively t
          org-pretty-entities t
          org-src-preserve-indentation t
          ;org-hide-emphasis-markers t ;; show actually italicized text instead of /italicized text/
          org-ellipsis "⤵" ;; foldings symbol
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t
          org-format-latex-options (plist-put org-format-latex-options :scale 1.5)
          org-footnote-auto-adjust t
          org-footnote-auto-label t
          org-use-sub-superscripts '{} ;; underscores, etc needs to be wraped as a_{underscore}

          ;; other behavior
          org-id-method (quote uuidgen)
          org-file-apps
          '((auto-mode . emacs)
            ("\\.mm\\'" . default)
            ("\\.x?html?\\'" . "firefox %s")
            ("\\.pdf\\'" . "open %s"))
          ;; org-enforce-todo-dependencies t ;; parent should not be marked as done if children are note

          ;; navigation
          org-special-ctrl-a/e t ;; C-a to beginning, C-e to end

          ;; org todos
          org-todo-keywords '((sequence "TODO(t)" "|" "DONE(x!)" ))
          org-yank-adjusted-subtrees t

          ;; archiving
          org-archive-mark-done t
          org-archive-location "%s_archive::* Archived Tasks"
          )
)
#+END_SRC

** =org-agenda=

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list org-directory
                        (concat org-directory "todo.org")))
#+END_SRC

** =org-bullets=

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** =org-cliplink=

A simple command that takes a URL from the clipboard and inserts an
org-mode link with a title of a page found by the URL into the current
buffer.

#+BEGIN_SRC emacs-lisp
(use-package org-cliplink
  :bind ("C-x p i" . org-cliplink))
#+END_SRC

** =org-ref=

Configure synced drive path

#+BEGIN_SRC emacs-lisp
(when (is-mac-p)
  (setq ref-dir "~/Books/Paper/"))

(when (is-linux-p)
  (setq ref-dir "~/Books/Paper/"))
#+END_SRC

#+begin_src emacs-lisp
(defun my/org-ref-open-pdf-at-point ()
  "Open the pdf for bibtex key under point if it exists."
  (interactive)
  (let* ((results (org-ref-get-bibtex-key-and-file))
         (key (car results))
         (pdf-file (funcall org-ref-get-pdf-filename-function key)))
    (if (file-exists-p pdf-file)
    (funcall bibtex-completion-pdf-open-function (car (bibtex-completion-find-pdf key)))
      (message "No PDF found for %s" key))))

(setq org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point)

(use-package org-ref
  :after org
  :config
  (setq org-ref-default-bibliography'("~/Documents/org/bibliography/default.bib")
        org-ref-bibliography-notes "~/Documents/org/todo.org"
        org-ref-pdf-directory ref-dir
        org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point))
#+end_src

** =org-noter=

Use org-noter

#+BEGIN_SRC emacs-lisp
(use-package org-noter
  :after org
  :config
  (setq org-noter-default-notes-file-names '("index.org")
        org-noter-notes-search-path '("~/Documents/org")
        org-noter-separate-notes-from-heading t))
#+END_SRC

On smaller screen, change the split

#+BEGIN_SRC emacs-lisp
(when (is-mac-p)
  (setq org-noter-set-doc-split-fraction 0.7))
#+END_SRC

Combine to use with org-ref, [[https://write.as/dani/notes-on-org-noter][source]]

#+BEGIN_SRC emacs-lisp
(defun org-ref-noter-at-point ()
      "Open the pdf for bibtex key under point if it exists."
      (interactive)
      (let* ((results (org-ref-get-bibtex-key-and-file))
             (key (car results))
             (pdf-file (funcall org-ref-get-pdf-filename-function key)))
        (if (file-exists-p pdf-file)
            (progn
              (find-file-other-window pdf-file)
              (org-noter))
          (message "no pdf found for %s" key))))

(add-to-list 'org-ref-helm-user-candidates
             '("Org-Noter notes" . org-ref-noter-at-point))
#+END_SRC

** =pdf-tools=

Configure paths stuff for pdf-tools

#+BEGIN_SRC emacs-lisp
;; appending a new path to existing path
(when (is-mac-p)
  (setenv "PKG_CONFIG_PATH"
          (concat
           "/usr/local/Cellar/zlib/1.2.8/lib/pkgconfig" ":"
           "/usr/local/opt/libffi/lib/pkgconfig" ":"
           "/usr/local/lib/pkgconfig" ":"
           "/opt/X11/lib/pkgconfig" ":"
           (getenv "PKG_CONFIG_PATH")
           )))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  (custom-set-variables
    '(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead.
  (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo"))
(pdf-tools-install)
#+END_SRC

** =ox-hugo=

#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :after ox)
#+END_SRC

** Spelling

Install aspell with english dictionary.

GNU Aspell is a Free and Open Source spell checker designed to
eventually replace Ispell.

#+BEGIN_SRC sh
brew install aspell
#+END_SRC

Thanks to [[https://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html][source]]

#+BEGIN_SRC emacs-lisp
;; find aspell and hunspell automatically
(cond
 ;; try hunspell at first
  ;; if hunspell does NOT exist, use aspell
 ((executable-find "hunspell")
  (setq ispell-program-name "hunspell")
  (setq ispell-local-dictionary "en_US")
  (setq ispell-local-dictionary-alist
        ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
        ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
          )))

 ((executable-find "aspell")
  (setq ispell-program-name "aspell")
  ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
  (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))))
#+END_SRC

Check word-spellings in strings and comments

=C-;= Cycle through corrections for word at point
=M-$= Check an correct spelling of the word at point

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :diminish 'flyspell-mode
  :hook (
         (prog-mode . flyspell-prog-mode)
         (text-mode . flyspell-mode)))
#+END_SRC

** Synosures

With synosaurus, you can choose a synonym to replace a word

This requires wordnet =wn= tool on mac:

#+BEGIN_SRC shell
brew cask install xquartz
brew install wordnet
#+END_SRC

Linux

#+BEGIN_SRC shell
tar xvzf WordNet-3.0.tar.gz
./configure

# add
# "#define USE_INTERP_RESULT 1"
# before #include <tcl.h>

make
sudo make install
#+END_SRC

Ubuntu

#+BEGIN_SRC shell
apt get install wordnet
#+END_SRC

#+BEGIN_SRC emacs-lisp
(when (is-linux-p) (append-to-path "/usr/local/WordNet-3.0/bin"))

(use-package synosaurus
  :diminish synosaurus-mode
  :init    (synosaurus-mode)
  :config  (setq synosaurus-choose-method 'popup) ;; 'ido is default.
           (global-set-key (kbd "M-#") 'synosaurus-choose-and-replace)
)
#+END_SRC

Use wordnut to use wordnet as dictionary

#+BEGIN_SRC emacs-lisp
(use-package wordnut
 :bind ("M-!" . wordnut-lookup-current-word))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :hook (after-init . global-flycheck-mode))
#+END_SRC

** Language Tool

#+BEGIN_SRC shell
wget https://internal1.languagetool.org/snapshots/LanguageTool-latest-snapshot.zip
#+END_SRC

LanguageTool offers spell and grammar checking. Just paste your text
here and click the 'Check Text' button. Click the colored phrases for
details on potential errors. or use this text too see an few of of the
problems that LanguageTool can detecd. What do you thinks of grammar
checkers? Please not that they are not perfect. Style issues get a
blue marker: It's 5 P.M. in the afternoon. The weather was nice on
Thursday, 27 June 2017.

#+BEGIN_SRC emacs-lisp
(use-package langtool
  :config
  (when (is-mac-p)
    (setq langtool-language-tool-jar
          "/Applications/LanguageTool-4.8-SNAPSHOT/languagetool-commandline.jar"))
  (when (is-linux-p)
    (setq langtool-language-tool-jar
          "/usr/local/src/LanguageTool-4.8-SNAPSHOT/languagetool-commandline.jar")))

(add-hook 'langtool-error-exists-hook
  (lambda ()
    (langtool-correct-buffer)
    (langtool-check-done)
  ))

(global-set-key "\M-^" 'langtool-check)
#+END_SRC

* Code
** Path

Append path of my programs

#+BEGIN_SRC emacs-lisp
(append-to-path "/usr/bin")
(append-to-path "/usr/local/bin")
#+END_SRC

** =ditaa=

#+BEGIN_SRC shell
cd .emacs.d/elpa && mkdir -p contrib/scripts
cd scripts
which ditaa   ## I have mine in /usr/local/bin
ln -s /usr/local/bin/ditaa0_9.jar ditaa.jar
ln -s /usr/local/bin/DitaaEps.jar DitaaEps.jar
#+END_SRC

** Company Mode

#+BEGIN_SRC emacs-lisp
(use-package company
  :bind (("C-." . company-complete)
         :map company-active-map
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous)
         ("C-d" . company-show-doc-buffer)
         ("<tab>" . company-complete))
  :init
  (global-company-mode 1)
  :config
  (setq company-show-numbers t
        company-tooltip-align-annotations t)

  (let ((map company-active-map))
    (mapc
     (lambda (x)
       (define-key map (format "%d" x) 'ora-company-number))
     (number-sequence 0 9))
    (define-key map " " (lambda ()
                          (interactive)
                          (company-abort)
                          (self-insert-command 1)))
    (define-key map (kbd "<return>") nil))

  (defun ora-company-number ()
    "Forward to `company-complete-number'.

Unless the number is potentially part of the candidate.
In that case, insert the number."
    (interactive)
    (let* ((k (this-command-keys))
           (re (concat "^" company-prefix k)))
      (if (cl-find-if (lambda (s) (string-match re s))
                      company-candidates)
          (self-insert-command 1)
        (company-complete-number (string-to-number k))))))
#+END_SRC

** Shell

Indent with 2 spaces.

#+BEGIN_SRC emacs-lisp
(add-hook 'sh-mode-hook
          (lambda ()
            (setq sh-basic-offset 2
                  sh-indentation 2)))

(setq-default explicit-shell-file-name "bash")
#+END_SRC

** Eshell

Testing this out

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :bind (("<f1>" . eshell))
    :hook ((eshell-mode . with-editor-export-editor)
           (eshell-mode . setup-company-eshell-autosuggest))
    :init
    (setq eshell-banner-message "")

    (defun new-eshell ()
      (interactive)
      (eshell 'true))

    (use-package esh-autosuggest
      :init
      (defun setup-company-eshell-autosuggest ()
        (with-eval-after-load 'company
          (setq-local company-backends '(esh-autosuggest))
          (setq-local company-frontends '(company-preview-frontend))))))
#+END_SRC

*** Some eshell functions

[[https://justin.abrah.ms/dotfiles/emacs.html][source]]

#+BEGIN_SRC emacs-lisp
(defun eshell/extract (file)
  (eshell-command-result (concat (if-string-match-then-result
                                  file
                                  '((".*\.tar.bz2" "tar xjf")
                                    (".*\.tar.gz" "tar xzf")
                                    (".*\.bz2" "bunzip2")
                                    (".*\.rar" "unrar x")
                                    (".*\.gz" "gunzip")
                                    (".*\.tar" "tar xf")
                                    (".*\.tbz2" "tar xjf")
                                    (".*\.tgz" "tar xzf")
                                    (".*\.zip" "unzip")
                                    (".*\.jar" "unzip")
                                    (".*\.Z" "uncompress")
                                    (".*" "echo 'Could not extract the requested file:'")))
                                 " " file)))

(defun eshell/clear ()
  "clear the eshell buffer."
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)))
#+END_SRC

** Scala

=scala-mode= and =sbt-mode= needs to be installed. Based on [[https://scalameta.org/metals/docs/editors/emacs.html][this]]

#+BEGIN_SRC emacs-lisp
;; Enable scala-mode and sbt-mode
(use-package scala-mode
  :mode "\\.s\\(cala\\|bt\\)$")

(use-package sbt-mode
  :commands sbt-start sbt-command
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map))

;; Enable nice rendering of diagnostics like compile errors.
(use-package flycheck
  :init (global-flycheck-mode))

(use-package lsp-mode
  ;; Optional - enable lsp-mode automatically in scala files
  :hook (scala-mode . lsp)
  :config (setq lsp-prefer-flymake nil))

(use-package lsp-ui)

;; Add company-lsp backend for metals
(use-package company-lsp)
#+END_SRC

** R

Enable ess

#+BEGIN_SRC emacs-lisp
 (use-package ess
  :ensure t
  :init (require 'ess-site))
#+END_SRC

#+BEGIN_SRC
(setq ess-Rf-ont-lock-keywords
    '((ess-R-fl-keyword:modifiers . t)
     (ess-R-fl-keyword:fun-defs . t)
     (ess-R-fl-keyword:keywords . t)
     (ess-R-fl-keyword:assign-ops)
     (ess-R-fl-keyword:constants . t)
     (ess-fl-keyword:fun-calls . t)
     (ess-fl-keyword:numbers)
     (ess-fl-keyword:operators)
     (ess-fl-keyword:delimiters)
     (ess-fl-keyword:=)
     (ess-R-fl-keyword:F&T)
     (ess-R-fl-keyword:%op%)))

(add-hook 'ess-mode-hook 'turn-on-pretty-mode)
#+END_SRC

Activate company mode with ESS

#+BEGIN_SRC emacs-lisp
        (setq ess-use-company t
                                company-selectionw-rap-around t
                                company-tooltip-align-annotations t
                                company-idle-delay 0.36
                                company-show-numbers t
                                company-tooltip-flip-when-above t
                                company-minimum-prefix-length 2
                                company-tooltip-limit 10)

#+END_SRC

Display quick help

#+BEGIN_SRC emacs-lisp
(define-key company-active-map (kbd "M-h") 'company-show-doc-buffer)
#+END_SRC

Completion keys

#+BEGIN_SRC emacs-lisp
(define-key company-active-map [return] nil)
(define-key company-active-map [tab] 'company-complete-common)
(define-key company-active-map (kbd "TAB") 'company-complete-common)
(define-key company-active-map (kbd "M-TAB") 'company-complete-selection)
#+End_Src

Bind =M-,= as next in auto-complete, =M-k= as previous.

#+BEGIN_SRC emacs-lisp
 (define-key company-active-map (kbd "M-n") nil)
 (define-key company-active-map (kbd "M-p") nil)
 (define-key company-active-map (kbd "M-,") 'company-select-next)
 (define-key company-active-map (kbd "M-k") 'company-select-previous)
#+END_SRC

An example is like:

#+BEGIN_SRC R
         library(ggplot2)

         ggplot(mpg, aes(displ, hwy, Colour = class)) +
                         geom_point() +
                         geom_abline
#+END_SRC

When use R with =org-mode=, Don't need to double check before evaluate with =C-c C-c=

#+BEGIN_SRC emacs-lisp
 (setq org-confirm-babel-evaluate nil)
#+END_SRC

Enable graphical output

#+BEGIN_SRC emacs-lisp
 (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
 (add-hook 'org-mode-hook 'org-display-inline-images)
#+END_SRC

Some inline example SRC_R[:exports results]{round(pi, 2)}

** Python
*** Install

Install pyenv

#+BEGIN_SRC sh
curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
#+END_SRC

modify =~/.bashrc= with following:

#+BEGIN_SRC text
export PATH="/home/yizhe/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
#+END_SRC

Install pipenv

#+BEGIN_SRC sh
curl https://raw.githubusercontent.com/kennethreitz/pipenv/master/get-pipenv.py | python
#+END_SRC

*** Config

Add =/opt/anaconda/bin= to load path.

#+BEGIN_SRC emacs-lisp
(when (is-linux-p) (append-to-path "~/.pyenv/shims/python"))
(when (is-mac-p) (append-to-path "~/.pyenv/shims/python"))
#+END_SRC

Configure my coda environments

#+BEGIN_SRC emacs-lisp
; where to look for environments
(when (is-linux-p)(setenv "WORKON_HOME" "~/.local/share/virtualenvs"))
(when (is-mac-p)(setenv "WORKON_HOME" "~/.local/share/virtualenvs"))

(use-package pyvenv
        :init
        (pyvenv-mode 1)
        (pyvenv-tracking-mode 1))
#+END_SRC

Configure python mode

#+BEGIN_SRC emacs-lisp
;; enable elpy
(use-package python
  :defer t
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode)
  :init
  (setq-default indent-tabs-mode nil)
  :config
  (setq python-indent-offset 4)
  (use-package smartparens
    :init
    (add-hook 'python-mode-hook 'smartparens-mode))
  (use-package color-identifiers-mode
    :init
    (add-hook 'python-mode-hook 'color-identifiers-mode)))
#+END_SRC

Python indents

#+BEGIN_SRC emacs-lisp
(setq python-indent-guess-indent-offset t)
(setq python-indent-guess-indent-offset-verbose nil)
#+END_SRC

Have been getting this: Warning (python): Your
‘python-shell-interpreter’ doesn’t seem to support readline, yet
‘python-shell-completion-native’ was t and "ipython" is not part of
the ‘python-shell-completion-native-disabled-interpreters’
list. Native completions have been disabled locally.

#+BEGIN_SRC emacs-lisp
(setq python-shell-completion-native-enable nil)
#+END_SRC

Use =ipython= interpreter with elpy

#+BEGIN_SRC emacs-lis
;; ipython interpreter
(when (executable-find "ipython")
  (setq python-shell-interpreter "ipython")
  python-shell-interpreter-args "-i --simple-prompt")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "python3")
#+END_SRC

Format code according to =PEP8= when save:

#+BEGIN_SRC emacs-lisp
(use-package py-autopep8
:init
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
#+END_SRC

=elpy= fix indentation

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :init
  (elpy-enable)
  :config
  (setq elpy-rpc-virtualenv-path 'current)
  (electric-indent-local-mode -1)
  (delete 'elpy-module-highlight-indentation elpy-modules)
  (delete 'elpy-module-flymake elpy-modules)

  (defun ha/elpy-goto-definition ()
    (interactive)
    (condition-case err
        (elpy-goto-definition)
      ('error (xref-find-definitions (symbol-name (symbol-at-point))))))

  :bind (:map elpy-mode-map ([remap elpy-goto-definition] .
                             ha/elpy-goto-definition)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'elpy-mode-hook
            (lambda ()
                    (setq-default indent-tabs-mode t)
                    (setq-default tab-width 2)
                    (setq-default py-indent-tabs-mode t)
            (add-to-list 'write-file-functions 'delete-trailing-whitespace)))
#+END_SRC

=Jedi= for auto-completion

#+BEGIN_SRC emacs-lisp
(use-package jedi
  :config
  (use-package company-jedi
    :init
    (add-hook 'python-mode-hook (lambda () (add-to-list 'company-backends 'company-jedi)))
    (setq company-jedi-python-bin "python")))
#+END_SRC

*** COMMENT Example of use
**** remote

#+BEGIN_SRC emacs-lisp :results none
(setenv "WORKON_HOME" "/sshx:manx:/home/ec2-user/.local/share/virtualenvs")
(set 'pyvenv-workon "ec2-user-zzkNbF-x")
#+END_SRC

#+BEGIN_SRC shell
python -V 2>&1
#+END_SRC

#+BEGIN_SRC text :tangle ~/Downloads/remote-python
#!/usr/bin/env bash
ssh manx -t "/home/ec2-user/.local/share/virtualenvs/ec2-user-zzkNbF-x/bin/ipython $@"
#+END_SRC

Append executable to path

#+BEGIN_SRC emacs-lisp
(when (is-linux-p) (append-to-path "~/Downloads/remote-python"))
#+END_SRC

#+RESULTS:
| ~/Downloads/remote-python | /sshx:manx:/home/ec2-user/.local/share/virtualenvs/ec2-user-zzkNbF-x/bin | /usr/local/WordNet-3.0/bin | /usr/local/julia/julia-current/bin | ~/.pyenv/shims/python | /home/ANT.AMAZON.COM/yizhx/.local/share/umake/bin | /usr/local/sbin | /usr/local/bin | /usr/sbin | /usr/bin | /sbin | /bin | /usr/games | /usr/local/games | /snap/bin | /usr/lib/x86_64-linux-gnu/emacs/26.3/x86_64-linux-gnu |

#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "~/Downloads/remote-python" python-shell-interpreter-args "--simple-prompt -i")
#+END_SRC

**** plots

#+begin_src python :results file
import matplotlib, numpy
matplotlib.use('Agg')
import matplotlib.pyplot as plt
fig=plt.figure(figsize=(4,2))
x=numpy.linspace(-15,15)
plt.plot(numpy.sin(x)/x)
fig.tight_layout()
plt.savefig('python-matplot-fig.png')
plt.close()

'python-matplot-fig.png' # return filename to org-mode
#+end_src

#+RESULTS:
[[file:python-matplot-fig.png]]

**** inline source code

#+begin_src python :session sess_calc :exports code :results none
a = 5 + 5
b = a + 5
#+end_src

Another inline example: the result of the calculation is src_python[:session calc]{a}

- test with result in a list: src_python[:session sess_calc]{a}
  + src_python[:session sess_calc]{a} vs src_python[:session sess_calc]{b}
  + 1 + 1 = src_python[:exports code]{ return 1 + 1 }

Another example using value raw option ([[https://orgmode.org/manual/results.html][link]])

#+begin_src python :session calc :exports code :results values raw
a = 5 + 5
b = a-1
ares = '#+MACRO: a '+ str(a)
bres = '#+MACRO: b '+ str(b)
ares + '\n' + bres
#+end_src

#+RESULTS:
#+MACRO: a 10
#+MACRO: b 9

The result is still {{{a}}} and b is {{{b}}}. The key is source code
block needs to evaluated first before export.

**** caching

#+name: cachedFunction
#+BEGIN_SRC python :cache yes
x = 18
return x
#+END_SRC

#+name: uncachedFunction
#+BEGIN_SRC python :var x=cachedFunction
return int(x)
#+END_SRC

Now any calls to call_uncachedFunction() will get the cached value from cachedFunction.

** Julia
*** With OSX

#+BEGIN_SRC emacs-lisp
(when (is-mac-p)
  (append-to-path "/Applications/Julia-1.0.app/Contents/Resources/julia/bin"))
#+END_SRC

*** With Ubuntu

#+BEGIN_SRC emacs-lisp
(when (is-linux-p)
  (append-to-path "/usr/local/julia/julia-current/bin"))
#+END_SRC

*** Julia Repl

#+BEGIN_SRC emacs-lisp
(use-package julia-repl)
#+END_SRC

*** ob-julia

#+BEGIN_SRC shell
curl -o ~/.emacs.d/resources/ob-julia.el https://code.orgmode.org/bzg/org-mode/raw/master/contrib/lisp/ob-julia.el
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ob-julia
    :load-path "~/.emacs.d/resources")
#+END_SRC

** Regexp

Regexes are great. Not everyone knows them, and most user interfaces
don’t expose them, but I think most people who use computers could use
them. Luckily, Emacs is great about this. It’s easier to use them if
you have good tools for noticing if your regular expressions match
input.

*** Build Regexes

#+BEGIN_SRC emacs-lisp
 (use-package re-builder
   :bind (("C-c R" . re-builder))
   :config
   (setq reb-re-syntax 'string))
#+END_SRC

*** Replace Strings with Regexes
#+BEGIN_SRC emacs-lisp
 (use-package visual-regexp
     :bind (("M-5" . vr/replace)
            ("M-%" . vr/query-replace)))
#+END_SRC
** Emacs Lisp
*** Elisp-Slime-Nav
#+BEGIN_SRC emacs-lisp
(use-package elisp-slime-nav
  :init
  (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
    (add-hook hook 'elisp-slime-nav-mode)))
#+END_SRC

*** Eldoc

When in emacs-lisp-mode, display the argument list for the current
function.

#+BEGIN_SRC emacs-lisp
(autoload 'turn-on-eldoc-mode "eldoc" nil t)
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
(add-hook 'ielm-mode-hook 'eldoc-mode)
(add-hook 'cider-mode-hook 'eldoc-mode)
#+END_SRC

** Git
*** magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)
         ("C-c g" . magit-status)
         :map magit-status-mode-map
         ("TAB" . magit-section-toggle)
         ("<C-tab>" . magit-section-cycle)
         :map magit-branch-section-map
         ("RET" . magit-checkout))
  :config
  (add-hook 'after-save-hook 'magit-after-save-refresh-status)
  (setq magit-use-overlays nil
        magit-section-visibility-indicator nil
        magit-completing-read-function 'ivy-completing-read
        magit-push-always-verify nil
        magit-repository-directories '("~/src/"))
  (use-package git-timemachine
    :bind (("C-x v t" . git-timemachine)))
  (use-package git-link
    :bind (("C-x v L" . git-link))
    :init
    (setq git-link-open-in-browser t))
  (use-package pcmpl-git)
  (defun visit-pull-request-url ()
    "Visit the current branch's PR on Github."
    (interactive)
    (browse-url
     (format "https://github.com/%s/pull/new/%s"
             (replace-regexp-in-string
              "\\`.+github\\.com:\\(.+\\)\\.git\\'" "\\1"
              (magit-get "remote"
                         (magit-get-remote)
                         "url"))
             (cdr (magit-get-remote-branch)))))

  (bind-key "v" 'visit-pull-request-url magit-mode-map)

  ;; Do Not Show Recent Commits in status window
  ;; https://github.com/magit/magit/issues/3230#issuecomment-339900039
  (magit-add-section-hook 'magit-status-sections-hook
                          'magit-insert-unpushed-to-upstream
                          'magit-insert-unpushed-to-upstream-or-recent
                          'replace))
#+END_SRC

*** Git Auto Commit Mode

#+BEGIN_SRC emacs-lisp
(use-package git-auto-commit-mode
  :delight)
#+END_SRC

** SQL

Use =sql-mode= for =.hql= file type

#+BEGIN_SRC emacs-lisp
;; I want .hql and .q files to use sql-mode
(defun my-sql-customisations ()
  "sql-mode customisations that must be done after sql-mode loads"
  (add-to-list 'same-window-buffer-names "*SQL*"))

(use-package sql
  :config
  (add-to-list 'auto-mode-alist '("\\.hql\\'" . sql-mode))
  (autoload 'sql-mode "sql-mode" "SQL editing mode." t)
  (setq sql-mode-hook 'my-sql-customisations))
#+END_SRC

Indentation

#+BEGIN_SRC emacs-lisp
(use-package sql-indent
  :config
(add-hook 'sql-mode-hook 'sqlind-minor-mode))
#+END_SRC

Line truncates

#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))
#+END_SRC

upper case SQL keywords from [[https://www.emacswiki.org/emacs/SqlMode][here]]

#+BEGIN_SRC emacs-lisp
(defun sql-upcase-keywords ()
  (interactive)
  (save-excursion
    (dolist (keywords sql-mode-postgres-font-lock-keywords)
      (goto-char (point-min))
      (while (re-search-forward (car keywords) nil t)
        (goto-char (+ 1 (match-beginning 0)))
        (when (eql font-lock-keyword-face (face-at-point))
          (backward-char)
          (upcase-word 1)
          (forward-char))))))
#+END_SRC

*** COMMENT Postgress Examples

#+BEGIN_SRC shell
psql -h HOST -p PORT -d DATABASE -U USER
psql -h HOST -p PORT -d DATABASE -U USER -W -t -A -F "," -f query.sql -o output.csv
#+END_SRC

Header args for executing sql

:PROPERTIES:
:header-args:sql: :engine postgresql :dbhost HOST :dbport PORT :dbuser USER :database DATABASE
:END:

** Latex

#+BEGIN_SRC emacs-lisp
(when (is-mac-p) (append-to-path "/Library/TeX/texbin/"))
#+END_SRC

Latex packages

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-packages-alist '("listings" "algorithm2e"))
#+END_SRC

** graphviz
#+BEGIN_SRC emacs-lisp
(use-package graphviz-dot-mode)
#+END_SRC
** tramp

#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "sshx")
(setq tramp-auto-save-directory "~/Documents/auto-saves")
(setq tramp-shell-prompt-pattern "^[^$>\n]*[#$%>] *\\(\[[0-9;]*[a-zA-Z] *\\)*")
#+END_SRC

** json

#+BEGIN_SRC emacs-lisp
(use-package json-mode)
#+END_SRC

** =org-babel=

Source code that =org-babel= wants to evaluate

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t)
   (python . t)
   (R . t)
   (latex . t)
   (julia . t)
   (dot . t)
   (sql . t)
   (ditaa . t)))
#+END_SRC

Tangle the source block under cursor ([[https://stackoverflow.com/a/39628921][source]])

#+BEGIN_SRC emacs-lisp
(defun org-babel-tangle-block()
  (interactive)
  (let ((current-prefix-arg '(4)))
     (call-interactively 'org-babel-tangle)
))

(eval-after-load "org"
  '(progn
     (define-key org-mode-map (kbd "C-c b") 'org-babel-tangle-block)
))
#+END_SRC

* Debug

** COMMENT Interaction Log

Interaction Log is like view-lossage (C-h l) or kmacro-edit-macro but
it is live-updating and not tied to macros. It’s useful for when you
type an (awesome? terrible?) Emacs command and want to figure out
which function you used so you can use it again or destroy it
forever. For a long time I was plagued by accidentally hitting
downcase-region and didn’t know what the function was - this would
have been so useful!

#+BEGIN_SRC emacs-lisp
(use-package interaction-log)

(interaction-log-mode +1)

(defun open-interaction-log ()
  (interactive)
  (display-buffer ilog-buffer-name))

(bind-key "C-h C-l" 'open-interaction-log)
#+END_SRC
